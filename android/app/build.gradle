// local.properties
def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
  localPropertiesFile.withReader('UTF-8') { reader ->
    localProperties.load(reader)
  }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
  throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

// key.properties
boolean hasKeyStore = false

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
  keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
  hasKeyStore = true
} else {
  println "+++"
  println "No keystore defined. The app will not be signed."
  println "Create a android/key.properties file with the following properties:"
  println "storePassword"
  println "keyPassword"
  println "keyAlias"
  println "storeFile"
  println "+++"
}

// version.properties
def versionProperties = new Properties()
def versionPropertiesFile = rootProject.file('version.properties')
if (versionPropertiesFile.exists()) {
  versionPropertiesFile.withReader('UTF-8') { reader ->
    versionProperties.load(reader)
  }
}

def freeVersionCode = versionProperties.getProperty('freeVersionCode')
def freeVersionName = versionProperties.getProperty('freeVersionName')

def proVersionCode = versionProperties.getProperty('proVersionCode')
def proVersionName = versionProperties.getProperty('proVersionName')

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
  compileSdk 31

  defaultConfig {
    minSdk 21
    targetSdk 31
  }

  flavorDimensions "app"

  productFlavors {
    free {
      applicationId "com.robertodoering.harpy.free"
      versionCode freeVersionCode.toInteger()
      versionName freeVersionName
    }
    pro {
      applicationId "com.robertodoering.harpy.pro"
      versionCode proVersionCode.toInteger()
      versionName proVersionName
    }
  }

  lint {
    disable 'InvalidPackage'
  }

  if (hasKeyStore) {
    signingConfigs {
      release {
        keyAlias keystoreProperties['keyAlias']
        keyPassword keystoreProperties['keyPassword']
        storeFile file(keystoreProperties['storeFile'])
        storePassword keystoreProperties['storePassword']
      }
    }
  }

  buildTypes {
    release {
      if (hasKeyStore) {
        signingConfig signingConfigs.release
      } else {
        signingConfig signingConfigs.debug
      }
    }
  }
}

flutter {
  source '../..'
}
